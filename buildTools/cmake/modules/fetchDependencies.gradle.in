/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*----------------------------------------------------
 *
 * resolve external artifacts directly from Nexus to
 * supporting building the Android image
 *
 * expected to be called from the Docker recipe, but
 * when done manually should look similar to:
 *    gradle -b android.gradle extract
 *
 *----------------------------------------------------*/

// load gradle plugins
//
apply plugin: "base"
apply plugin: "maven"

// extract environment/input variables we need
//
//def topDir = "@CMAKE_SOURCE_DIR@"

// custom configurations
//
configurations {
    fetch       // for resolving
}

/*-----------------
 * resolving
 *-----------------*/

// define repositories for resolving
// NOTE: necessary since this is not a "subproject"
//
repositories {
    mavenLocal()
    // Nexus, possibly multiple different repos(snapshot and release)
    nexusResolveUrl.split(",").each { nexusUrl ->
        maven {
            credentials {
                username "$nexusUser"
                password "$nexusPass"
            }
            url nexusUrl
        }
    }
}

// define the single artifact we want, using similar naming as the 'publish' below
//
dependencies {
@fetch_list@
}

// now the custom task to resolve the artifact
//
task extract(description: 'extract Android dependencies')
extract << {
    copy {
        from project.configurations.fetch
        into project.buildDir
    }
}

// second custom task to unzip the artifact
//
task unpack(type: Copy) {
    project.configurations.fetch.asFileTree.each {
        if (it.getName().endsWith("zip")) {
            from(zipTree(it))
        } else {
            from(it)
        }
    }

    into project.buildDir

    project.configurations.fetch.allDependencies.each {
        rename "${it.name}-${it.version}", "${it.name}"
    }
}
unpack.dependsOn extract

