<?xml version="1.0" encoding="UTF-8"?>
<!--
  -
   - Copyright 2021 Comcast Cable Communications Management, LLC
  -
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  - http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -
  - SPDX-License-Identifier: Apache-2.0
  -
  -->

<!-- 
  -
  - Define the IPC for "Watchdog Service".
  - NOTE: this is Aware only
  -
  -->
<p:service 
    xmlns:p="http://icontrol.com/service/v1.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://icontrol.com/service/v1.0 ../src/main/xsd/service.xsd "
    eventPort="13610" ipcPort="1580" name="watchdogService" >

    <p:pragma>
        <p:native>
            <p:apiHeaderDir>source/services/watchdog/api/c/public/watchdog</p:apiHeaderDir>
            <p:apiSrcDir>source/services/watchdog/api/c/src</p:apiSrcDir>
            <p:ipcHandlerSrcDir>source/services/watchdog/core/src</p:ipcHandlerSrcDir>
            <p:configFlag>CONFIG_SERVICE_WATCHDOG</p:configFlag>
        </p:native>
        <p:java>
            <p:apiDir>source/services/watchdog/api/java/src/main/java</p:apiDir>
            <p:apiPkg>com.icontrol.api.watchdog</p:apiPkg>
            <p:eventDir>source/services/watchdog/api/java/src/main/java</p:eventDir>
            <p:eventPkg>com.icontrol.event.watchdog</p:eventPkg>
        </p:java>
    </p:pragma>

    <!-- 
      - define message input/output POJOs
      -->

    <p:pojo varName="processInfo" varDescription="descibe the service known to watchdog">
        <p:stringVariable varName="serviceName"   varDescription="name of the service"/>
        <p:numVariable varName="processId" kind="long" nativeSigned="false" varDescription="if running, the PID of the running service"/>
        <p:boolVariable varName="autoStart"       varDescription="if true, the service is launched during startup"/>
        <p:boolVariable varName="restartOnFail"   varDescription="if true, the service is restarted when it dies"/>
        <p:boolVariable varName="running"         varDescription="if true, the service is running"/>
        <p:dateVariable varName="runStartTime"    varDescription="when the service was started"/>
        <p:boolVariable varName="expectsAck"      varDescription="if this service should acknowledge after startup"/>
        <p:dateVariable varName="ackReceivedTime" varDescription="when the ack was received"/>
        <p:numVariable varName="deathCount"    kind="long" nativeSigned="false" varDescription="number of times process died unexpectedly"/>
        <p:numVariable varName="ipcPortNum" kind="int" nativeSigned="false" varDescription="optional, if defined tell watchdog what IPC port the service is on.  used for gathing stats and status data."/>
        <p:boolVariable varName="isJava"          varDescription="if true, represents a Java Service so will have limited information (ex: pid)"/>
    </p:pojo>

    <p:pojo varName="allServiceNames" varDescription="list of the names of all known services">
        <p:arrayVariable varName="list" varDescription="all service names (as string)">
            <p:stringVariable varName="serviceName"/>
        </p:arrayVariable>
    </p:pojo>

    <p:pojo varName="allServices" varDescription="list of the process info for all known services">
        <p:arrayVariable varName="services" varDescription="all service process info (as processInfo Pojo)">
            <p:customRef>processInfo</p:customRef>
        </p:arrayVariable>
    </p:pojo>

    <p:pojo varName="shutdownOptions">
        <p:boolVariable varName="forReset" varDescription="if true, do not concern with saving cached info since resetting to factory or for rebranding"/>
        <p:boolVariable varName="exit"     varDescription="if true, kill watchdogService as well"/>
    </p:pojo>

    <!-- way to callback to a service during restore -->
    <p:pojo varName="ackServiceDef">
        <p:stringVariable varName="serviceName" varDescription="name of the service acknowledging it has completed startup"/>
        <p:numVariable varName="ipcPortNum" kind="int" nativeSigned="false" varDescription="optional, if defined tell watchdog what IPC port the service is on.  used for gathing stats and status data."/>
        <p:stringVariable varName="token" varDescription="random token generated by the service.  to be used as 'credentials' when requesting 'SERVICE_SHUTDOWN'"/>
    </p:pojo>

    <p:pojo varName="rebootRequest">
        <p:numVariable kind="int" varName="delaySeconds" nativeSigned="false"/>
        <p:stringVariable varName="shutdownReason"/>
    </p:pojo>

    <!--
      - define the events
      -->
    <p:eventList generate="C">


        <p:event varName="watchdogEvent" varDescription="Event from watchdogService">
            <p:stringVariable varName="name" varDescription="name of group or service.  check eventCode to determine if ALL, SERVICE, or GROUP"/>

            <p:eventCode>WATCHDOG_INIT_COMPLETE</p:eventCode>
            <p:eventCode>WATCHDOG_SERVICE_STATE_CHANGED</p:eventCode>
            <p:eventCode>WATCHDOG_GROUP_STATE_CHANGED</p:eventCode>
        </p:event>

        <!-- the various event codes sent from watchdogService -->
        <p:code name="WATCHDOG_INIT_COMPLETE"         value="100" description="sent after ALL services started or restarted.  see eventValue for details as to why"/>
        <p:code name="WATCHDOG_SERVICE_STATE_CHANGED" value="-1"  description="sent if 'a single service' has a state change.  see eventValue for further detail"/>
        <p:code name="WATCHDOG_GROUP_STATE_CHANGED"   value="-1"  description="sent if 'a group of services' had a state change.  see eventValue for further detail"/>

        <!--
          - Set of "event value" possibilities that can be sent with the WatchdogEvent
          - when the eventCode is WATCHDOG_SERVICE_STATE_CHANGED or WATCHDOG_GROUP_STATE_CHANGED
          -->
        <p:code name="WATCHDOG_EVENT_VALUE_ALL_SERVICES_STARTED"  value="1" description="WATCHDOG_INIT_COMPLETE eventValue when 'all services' COMPLETED startup"/>
        <p:code name="WATCHDOG_EVENT_VALUE_SOME_SERVICES_STARTED" value="2" description="WATCHDOG_INIT_COMPLETE eventValue when 'one or more services' COMPLETED startup (after crash or bounce)"/>
        <p:code name="WATCHDOG_EVENT_VALUE_ACTION_START"     value="10" description="WATCHDOG_*_STATE_CHANGED eventValue when one or more services were started"/>
        <p:code name="WATCHDOG_EVENT_VALUE_ACTION_DEATH"     value="11" description="WATCHDOG_*_STATE_CHANGED eventValue when one or more services died"/>
        <p:code name="WATCHDOG_EVENT_VALUE_ACTION_RESTART"   value="12" description="WATCHDOG_*_STATE_CHANGED eventValue when one or more services were restarted"/>

    </p:eventList>

    <!-- 
      - define IPC request messages
      -->
    
    <p:ipc>

        <!--
          - retrieve a single service by it's name
          -->
        <p:message id="10" name="GET_SERVICE_BY_NAME" generate="C">
            <p:description>return a service by the name</p:description>
            <p:input>
                <p:string varName="serviceName"/>
            </p:input>
            <p:output>
                <p:customRef>processInfo</p:customRef>
            </p:output>
        </p:message>

        <!--
          - retrieve all services (names or process info)
          -->
        <p:message id="11" name="GET_ALL_SERVICE_NAMES" generate="C">
            <p:description>return a list of all known serviceNames</p:description>
            <p:output>
                <p:customRef>allServiceNames</p:customRef>
            </p:output>
        </p:message>

        <p:message id="12" name="GET_ALL_SERVICES" generate="C">
            <p:description>return a list of the process info for all known services</p:description>
            <p:output>
                <p:customRef>allServices</p:customRef>
            </p:output>
        </p:message>

        <!--
          - shutdown all services without forcing a reboot
          -->
        <p:message id="15" name="SHUTDOWN_ALL_SERVICES" generate="BOTH" readTimeout="1920">
            <p:description>
                shutdown all services without forcing a reboot (NOTE: on JVM devices,
                does not exit the JVM - leaving the WatchdogService running).  has a
                long timeone due to some services can take minutes to shutdown.
            </p:description>
            <p:input>
                <p:customRef>shutdownOptions</p:customRef>
            </p:input>
        </p:message>

        <!--
          - shutdown all services then perform a "reset to factory".
          -->
        <p:message id="16" name="SHUTDOWN_AND_RESET_TO_FACTORY" generate="C" readTimeout="1920">
            <p:description>
                shutdown all services then perform a reset to factory.  If the platform
                supports reboot AND the 'exit' option is true, this will reboot the device
                after the reset to factory.
            </p:description>
            <p:input>
                <p:customRef>shutdownOptions</p:customRef>
            </p:input>
        </p:message>

        <!--
          - restart all services without forcing a reboot (NOTE: on JVM devices,
          - does not exit the JVM - leaving the WatchdogService running)
          -->
        <p:message id="20" name="RESTART_ALL_SERVICES" generate="BOTH" readTimeout="1920">
            <p:description>
                shutdown then startup all services without forcing a reboot
                (NOTE: on JVM devices, does not exit the JVM - leaving the
                WatchdogService running).  has a long timeone due to some
                services can take minutes to shutdown.
            </p:description>
            <p:input>
                <p:customRef>shutdownOptions</p:customRef>
            </p:input>
        </p:message>

        <!--
          - shutdown a single service (by name) and NOT restart it.
          - will ask the service to nicely shutdown, and then perform
          - a kill if it takes too long.
          -->
        <p:message id="30" name="STOP_SERVICE" generate="C">
            <p:description>start a single service (by name) and NOT restart it.  will ask the service to 'nicely' shutdown, but will perform a 'kill' if taking too long.</p:description>
            <p:input>
                <p:string varName="serviceName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

        <!--
          - starts a single service by name, if it's not already running
          -->
        <p:message id="35" name="START_SERVICE" generate="C">
            <p:description>starts a single service by name, if it's not already running</p:description>
            <p:input>
                <p:string varName="serviceName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

        <p:message id="40" name="RESTART_SERVICE" generate="C">
            <p:description>stop then start a single service by name</p:description>
            <p:input>
                <p:string varName="serviceName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

        <p:message id="45" name="RESTART_SERVICE_FOR_RECOVERY" generate="C">
            <p:description>stop then start a single service by name because there was some problem with it</p:description>
            <p:input>
                <p:string varName="serviceName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>


        <p:message id="50" name="START_GROUP" generate="C">
            <p:description>start a group of services</p:description>
            <p:input>
                <p:string varName="groupName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

        <p:message id="55" name="STOP_GROUP" generate="C" readTimeout="60">
            <p:description>stop a group of services</p:description>
            <p:input>
                <p:string varName="groupName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

        <p:message id="60" name="RESTART_GROUP" generate="C" readTimeout="60">
            <p:description>restart a group of services</p:description>
            <p:input>
                <p:string varName="groupName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>


        <p:message id="65" name="ACK_SERVICE_STARTUP" generate="C">
            <p:description>
                Called by a single service once it has completed initialization.
                Causes the WATCHDOG_INIT_COMPLETE once all services have reported in.
                If the optional port/msg numbers are larger then 0, they will be
                used to ask the service for "status".  That message signature needs
                to be string/string hash as the output so it can be displayed.
            </p:description>
            <p:input>
                <p:customRef>ackServiceDef</p:customRef>
            </p:input>
        </p:message>

        <p:message id="66" name="ARE_ALL_SERVICES_STARTUP" generate="C">
            <p:description>returns true if all services are started up.  necessary in case something missed the WATCHDOG_INIT_COMPLETE event</p:description>
            <p:output>
                <p:bool varName="allDone"/>
            </p:output>
        </p:message>

        <p:message id="70" name="STOP_MONITORING" generate="C">
            <p:description>stops monitoring of a particular service (meaning if it dies we will not restart it)</p:description>
            <p:input>
                <p:string varName="serviceName"/>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

        <!--
          - notification that Activation has completed, need to re-extract asset files
          - TODO: is this Touchstone only?
          -->
        <p:message id="75" name="ACTIVATION_COMPLETED" generate="C">
            <p:description>re-extract assets now that Activation is done (touchstone only for now)</p:description>
        </p:message>

        <p:message id="80" name="REBOOT_SYSTEM" generate="C" readTimeout="1860">
            <p:description>Schedule a system reboot after a configurable delay</p:description>
            <p:input>
                <p:customRef>rebootRequest</p:customRef>
            </p:input>
            <p:output>
                <p:bool varName="success"/>
            </p:output>
        </p:message>

    </p:ipc>
    
</p:service>
