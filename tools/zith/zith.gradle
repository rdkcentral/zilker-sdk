/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// define build environment repositories & dependencies
//
repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'

group 'com.comcast.xh'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    compile 'org.hamcrest:hamcrest:2.1'
//    compile 'com.github.grantwest.eventually:hamcrest-eventually-matchers:0.0.3'
    compile 'org.freemarker:freemarker:2.3.28'
    compile 'com.github.tomakehurst:wiremock:2.20.0'
    compile 'commons-io:commons-io:2.6'
    compile "org.json:json:${jsonVersion}"
    compile 'net.sf.saxon:Saxon-HE:9.9.1-5'
    compile 'commons-beanutils:commons-beanutils-core:1.8.3'
    compile 'io.github.classgraph:classgraph:4.8.43'
    compile 'com.github.docker-java:docker-java:3.1.2'
    compile project(':propsService-api')
    compile project(':watchdogService-api')
    implementation 'org.springframework.shell:spring-shell-starter:2.0.1.RELEASE'
    constraints {
        implementation('org.jline:jline:3.9.0') {
            because 'want to use Status API'
        }
    }
    implementation 'io.moquette:moquette-broker:0.12.1'

    compile 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.4.2'
    testImplementation 'org.junit.platform:junit-platform-runner:1.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

configurations {
    // Make sure no one pulls this in as it will cause issues
    runtime.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    implementation.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

mainClassName = "com.comcast.xh.zith.ZithShell"

test {
    useJUnitPlatform()

    // This is necessary as if you pass -D to gradle, it doesn't pass through to things it runs unless you do this
    System.properties.each { prop, val ->
        if (prop.toString().startsWith("zith."))
        {
            systemProperty prop.toString(), val.toString()
        }
    }

    // This is required to get multicast on loopback to work on Mac, just do it everywhere as we only really
    // care about using IPv4 anyways...
    systemProperty 'java.net.preferIPv4Stack', 'true'

    //Enable to bail on the first test failure
    failFast = true
    testLogging.showStandardStreams = true
}

import org.apache.tools.ant.filters.*

// processResources {
//     filter ReplaceTokens, tokens: [
//             "productVersion": project.property("productVersion")
//     ]
// }

task setupClientConfig(type:JavaExec) {
    main = "com.comcast.xh.zith.client.NativeZilkerClient"
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "zith.config.dir", System.getProperty("zith.config.dir")
}
